# -*- coding: utf-8 -*-
"""HW4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10UuK208vA-2nQzlIzs6m98QhfcK5opfW
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression, BayesianRidge
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import LinearSVR

names = ["Sex", "Length", "Diameter", "Height", "Whole weight", "Shucked weight", "Viscera weight", "Shell weight", "Rings"]

inputData = pd.read_csv("abalone.csv", names=names, skiprows = 1)
display(inputData.sample(10))

sexEncoded = []
for i in range(len(inputData["Sex"].values)):
    if inputData["Sex"].values[i] == "M":
        value=1
    elif inputData["Sex"].values[i] == "F":
        value=0
    else:
        value=-1
    sexEncoded.append(value)
inputData["Sex"] = sexEncoded

display(inputData.describe())

y = inputData["Rings"]
X = inputData.copy(deep=True)
X.drop(["Rings"], axis=1, inplace=True)

X_train = X.values[0:3134]
X_test = X.values[3134:]
y_train = y[0:3134]
y_test = y[3134:]

datasets = {}
datasets[0] = {'X_train' : X_train,
               'X_test': X_test,
               'y_train':y_train,
               'y_test' : y_test}

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

column_names = ["sex", "length", "diameter", "height", "whole weight", 
                "shucked weight", "viscera weight", "shell weight", "rings"]
data = pd.read_csv("abalone.csv", names=column_names, skiprows = 1)
print("Number of samples: %d" % len(data))

for label in "MFI":
    data[label] = data["sex"] == label
del data["sex"]

X = data.iloc[:, : -1].values
Y = data.iloc[:, : 7].values

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(X_train, Y_train)

import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
from sklearn.cluster import KMeans
from pandas import DataFrame

data = pd.read_csv('abalone.csv')
data
plt.scatter(data['Diameter'],data['Height'],data['Length'])
plt.xlim(-180,180)
plt.ylim(-90.90)
plt.show()

x = data.iloc[:,1:3]
x

kmeans = KMeans(3)
identified_clusters = kmeans.fit_predict(x)
identified_clusters

data_with_clusters = data.copy()
data_with_clusters['Clusters'] = identified_clusters
plt.scatter(data_with_clusters['Diameter'],data_with_clusters['Height'],data_with_clusters['Length'],c=data_with_clusters['Clusters'],cmap='rainbow')